<?php

declare(strict_types=1);

namespace PaneeDesign\DatabaseSwiftMailerBundle\Entity;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\Query;
use Swift_SwiftException;

/**
 * EmailRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmailRepository extends EntityRepository
{
    /**
     * @param Email $email
     *
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function addEmail(Email $email): void
    {
        $em = $this->getEntityManager();
        $email->setStatus(Email::STATUS_READY);
        $email->setRetries(0);
        $email->setCreatedAt(new DateTime());

        $scheduledDbChanges = 0;
        $scheduledDbChanges += \count($em->getUnitOfWork()->getScheduledEntityInsertions());
        $scheduledDbChanges += \count($em->getUnitOfWork()->getScheduledEntityUpdates());
        $scheduledDbChanges += \count($em->getUnitOfWork()->getScheduledEntityDeletions());
        $scheduledDbChanges += \count($em->getUnitOfWork()->getScheduledCollectionUpdates());
        $scheduledDbChanges += \count($em->getUnitOfWork()->getScheduledCollectionUpdates());

        $em->persist($email);

        // Flush only if there are not other db changes
        if (0 === $scheduledDbChanges) {
            $em->flush();
        }
    }

    /**
     * @param null $limit
     * @param null $offset
     *
     * @return Query
     */
    public function getAllEmails($limit = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('e');

        $qb
            ->addOrderBy('e.createdAt', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return $qb->getQuery();
    }

    /**
     * @param int $limit
     *
     * @return Email[]
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function getEmailQueue($limit = 100)
    {
        $qb = $this->createQueryBuilder('e');

        $qb->where($qb->expr()->eq('e.status', ':status'))->setParameter(':status', Email::STATUS_READY);
        $qb->orWhere($qb->expr()->eq('e.status', ':status_1'))->setParameter(':status_1', Email::STATUS_FAILED);
        $qb->andWhere($qb->expr()->lt('e.retries', ':retries'))->setParameter(':retries', 10);

        $qb->addOrderBy('e.retries', 'ASC');
        $qb->addOrderBy('e.createdAt', 'ASC');

        if (false === empty($limit)) {
            $qb->setMaxResults($limit);
        }

        $em = $this->getEntityManager();

        /** @var Email[] $emails */
        $emails = $qb->getQuery()->getResult();

        if (\count($emails) > 0) {
            foreach ($emails as $email) {
                $email->setStatus(Email::STATUS_PROCESSING);

                $em->persist($email);
            }

            $em->flush();
        }

        return $emails;
    }

    /**
     * @param Email                $email
     * @param Swift_SwiftException $ex
     *
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function markFailedSending(Email $email, Swift_SwiftException $ex): void
    {
        $email->setErrorMessage($ex->getMessage());
        $email->setStatus(Email::STATUS_FAILED);
        $email->setRetries((int) ($email->getRetries()) + 1);
        $email->setUpdatedAt(new DateTime());

        $em = $this->getEntityManager();
        $em->persist($email);
        $em->flush();
    }

    /**
     * @param Email $email
     *
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function markCompleteSending(Email $email): void
    {
        $email->setStatus(Email::STATUS_COMPLETE);
        $email->setSentAt(new DateTime());
        $email->setErrorMessage(null);
        $email->setUpdatedAt(new DateTime());
        $em = $this->getEntityManager();
        $em->persist($email);
        $em->flush();
    }
}
